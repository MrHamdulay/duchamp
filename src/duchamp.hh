/* src/duchamp.hh.  Generated by configure.  */
#ifndef DUCHAMP_HH
#define DUCHAMP_HH

#include <iostream>
#include <string>

#undef PACKAGE_BUGREPORT
#undef PACKAGE_NAME
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_VERSION
#include "config.h"

// how to convey whether a function has worked
enum OUTCOME {SUCCESS=0, FAILURE};

const std::string ERR_USAGE_MSG =
"Usage:: Duchamp -p [parameter file]\n\
  Other options:\n\
    -f <file>  Use default parameters with imageFile=<file>\n\
    -v         Version number\n\
    -h         This help information\n";

const std::string ERR_USAGE_MSG_SHORT="Usage:: Duchamp -p [parameter file]\n";

const std::string PROGNAME = PACKAGE_NAME;

const std::string VERSION = PACKAGE_VERSION;

// Specialised functions to report warnings and errors.
// These are defined in duchamp.cc
void duchampWarning(std::string subroutine, std::string warning);
void duchampError(std::string subroutine, std::string error);

// A simple functions to print a given number of backspaces or spaces
//  to std::cout
inline void printBackSpace(int num){for(int i=0;i<num;i++) std::cout << '\b';};
inline void printSpace(int num){ for(int i=0;i<num;i++) std::cout << ' '; };
inline void printHash(int num){ for(int i=0;i<num;i++) std::cout << '#'; };
class ProgressBar
{
  /**
   *  ProgressBar Class
   *   A class that prints out a progress bar in the form |####    |
   *    that shows how far through a function or loop you are.
   *   The length of it defaults to 20, but can be set when declaring the
   *    object.
   *   There are three functions: 
   *        init(size) --> prints an empty bar, and defines the increment
   *        update(num) --> prints the correct number of #s, but only when
   *                        num is a multiple of the increment.
   *        rewind(num) --> prints backspaces to cover the entire bar.
   */
public:
  ProgressBar(){length=20; loc=BEG;};
  ProgressBar(int newlength){length=newlength; loc=BEG;};
  enum POS {BEG=0,END};

  void init(int size){  
    std::cout << "|"; printSpace(length); 
    std::cout << "|" << std::flush;
    fraction = size/length;
    loc = END;
  };
  void update(int num){
    if(num%fraction==0){
      printBackSpace(length+2); std::cout << "|"; 
      printHash(num/fraction); printSpace(length-num/fraction); 
      std::cout << "|" << std::flush;
    }
    loc=END;
  };
  void rewind(){
    if(loc==END) printBackSpace(length+2); 
    loc=BEG;
    std::cout << std::flush;
  };
  void remove(){
    rewind();
    printSpace(length+2);
    loc=END; 
    rewind(); 
    std::cout << std::flush;
  };
  void fillSpace(std::string someString){
    rewind();
    std::cout << someString;
    printSpace(length+2-someString.size());
    loc=END;
  }
private:
  POS loc;
  int fraction;
  int length;
};

// The spectral type that we want the wcsprm structs to be in
const char duchampVelocityType[9] = "VELO-F2V";
const char duchampFrequencyType[9] = "FREQ";

enum TYPEDESC {FREQUENCY=0,VELOCITY,WAVELENGTH};
const std::string duchampSpectralDescription[3]=
  {"Frequency", "Velocity", "Wavelength"};

// The following are the FITS Header Keywords corresponding to the
//  parameters related to the atrous reconstruction.
const std::string keyword_scaleMin     = "DU_MINSC";
const std::string keyword_snrRecon     = "DU_ATCUT";
const std::string keyword_reconDim     = "DU_ATDIM";
const std::string keyword_filterCode   = "DU_FILTR";
const std::string keyword_ReconResid   = "DU_RECON";//reconstruction/residual?
const std::string keyword_hanningwidth = "DU_WHANN"; // hanning width
const std::string keyword_subsection   = "DU_IMSUB";

// And these are the comments corresponding to the relevant keywords
const std::string comment_scaleMin     = "Duchamp parameter scaleMin";
const std::string comment_snrRecon     = "Duchamp parameter snrRecon";
const std::string comment_reconDim     = "Duchamp parameter reconDim";
const std::string comment_filterCode   = "Duchamp parameter filterCode";
const std::string comment_ReconResid   = "Is this the reconstruction or residual?";
const std::string comment_hanningwidth = "Duchamp parameter hanningWidth";
const std::string comment_subsection   = "Subsection of the original image";

// Descriptive Headers: for the reconstruction case
const std::string header_reconHistory1 = 
"Reconstructed with a trous wavelet technique";
const std::string header_reconHistory2 = 
"Reconstruction by Duchamp v." + VERSION;
const std::string header_reconHistory_input = 
"Original (input) image used by Duchamp follows";
const std::string header_reconSubsection_comment  = 
"A subsection of the original was reconstructed by Duchamp";
const std::string header_atrous_comment  = 
"The following are the Duchamp parameters used in reconstruction";

// Descriptive Headers: for the Hanning-smoothing case
const std::string header_smoothHistory = 
"Hanning smoothed by Duchamp v." + VERSION;
const std::string header_smoothHistory_input = 
"Original (input) image used by Duchamp follows";
const std::string header_smoothSubsection_comment  = 
"A subsection of the original was smoothed by Duchamp";

#endif

