#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>
#include <stdio.h>
#include <Cubes/cubes.hh>
#include <Utils/utils.hh>

using std::endl;
using std::setw;
using std::setfill;
using std::setprecision;

void Detection::outputDetectionTextWCS(std::ostream &stream)
{
  /**
   * outputDetectionTextWCS
   *  Prints to a stream the relevant details of a detected object,
   *  including the WCS parameters, which need to have been calculated.
   *  If they have not (given by the isWCS() function), then the WCS-related outputs 
   *  are left blank.
   */

  stream << setw(5)  << setfill(' ') << this->id;
  if(this->flagWCS)
    stream << setw(14)               << this->name;
  else stream << "              ";
  stream.setf(std::ios::fixed);  
  stream <<setprecision(1);
  stream << setw(6)  << setfill(' ') << this->xcentre + this->xSubOffset;
  stream << setw(6)                  << this->ycentre + this->ySubOffset;
  stream << setw(7)                  << this->zcentre + this->zSubOffset;
  if(this->flagWCS){
    stream << setw(13)               << this->raS;
    stream << setw(13)               << this->decS;
    stream << setprecision(2);
    stream << setw(8)                << this->raWidth;
    stream << setw(8)                << this->decWidth;
    stream << setprecision(3);
    stream << setw(10)               << this->vel;
    stream << setw(9)                << this->velWidth;
  }
  else stream << "                                                             ";
  stream << setw(4)                  << this->xmin + this->xSubOffset;
  stream << setw(4)                  << this->xmax + this->xSubOffset;
  stream << setw(4)                  << this->ymin + this->ySubOffset;
  stream << setw(4)                  << this->ymax + this->ySubOffset;
  stream << setw(5)                  << this->zmin + this->zSubOffset;
  stream << setw(5)                  << this->zmax + this->zSubOffset;
  stream << setprecision(4);
  stream << setw(6)                  << this->pix.size();
  //   stream << setw(8)                  << this->totalFlux();
  stream << setw(10)                 << this->intFlux;
  stream << setw(8)                  << this->peakFlux;
  stream << endl;
  resetiosflags(std::ios::fixed);

}

void outputDetectionTextWCSHeader(std::ostream &stream, wcsprm *wcs)
{
  /**
   * outputDetectionTextWCSHeader
   *  Prints to a stream the column headers to match the output generated by outputDetectionTextWCS
   */

  string lngtype = wcs->lngtyp;
  string lattype = wcs->lattyp;
  
  stream<<setfill(' ');
  stream << setw(5)  << "Obj#";
  stream << setw(14) << "Name";
  stream << setw(6)  << "X";
  stream << setw(6)  << "Y";
  stream << setw(7)  << "Z";
  stream << setw(13) << lngtype;
  stream << setw(13) << lattype;
  stream << setw(8)  << "w_"+lngtype;
  stream << setw(8)  << "w_"+lattype;
  stream << setw(10) << "VEL";
  stream << setw(9)  << "w_VEL";
  stream << setw(4)  << "X1";
  stream << setw(4)  << "X2";
  stream << setw(4)  << "Y1";
  stream << setw(4)  << "Y2";
  stream << setw(5)  << "Z1";
  stream << setw(5)  << "Z2";
  stream << setw(6)  << "Npix";
  stream << setw(10)  << "F_tot";
  stream << setw(8)  << "F_peak";
  stream<<endl;
  stream<<setfill('-')<<setw(4+14+6+6+7+13+13+8+8+10+9+4+4+4+4+5+5+6+8+8)<<'-';
  stream<<endl;

}

void Detection::outputDetectionText(std::ostream &stream, int idNumber)
{
  /**
   * outputDetectionText
   *  Print to a stream the relevant details of a detected object.
   *  This does not include any WCS parameters, only pixel positions & extent, and flux info.
   *  Also prints a counter, provided as an input.
   */

  stream<<setw(5) <<setfill(' ')<< idNumber;
  stream.setf(std::ios::fixed);  
  stream<<setfill(' ') << setprecision(1);
  stream<<setw(6) << this->xcentre + this->xSubOffset;
  stream<<setw(6) << this->ycentre + this->ySubOffset;
  stream<<setw(7) << this->zcentre + this->zSubOffset;
  stream<<setw(4) << this->xmin + this->xSubOffset;
  stream<<setw(4) << this->xmax + this->xSubOffset;
  stream<<setw(4) << this->ymin + this->ySubOffset;
  stream<<setw(4) << this->ymax + this->ySubOffset;
  stream<<setw(5) << this->zmin + this->zSubOffset;
  stream<<setw(5) << this->zmax + this->zSubOffset;    
  stream<<setprecision(4); 
  stream<<setw(6) << this->pix.size();
  stream<<setw(10)<< this->totalFlux;
  stream<<setw(8) << this->peakFlux;  
  stream<<endl;
  resetiosflags(std::ios::fixed);

}

void outputDetectionTextHeader(std::ostream &stream)
{
  /**
   * outputDetectionTextHeader
   *  Prints to a stream the column headers to match the output generated by outputDetectionText
   */

  stream<<setfill(' ');
  stream<<setw(5)<<"Obj#";
  stream<<setw(6)<<"X";
  stream<<setw(6)<<"Y";
  stream<<setw(7)<<"Z";
  stream<<setw(4)<<"X1";
  stream<<setw(4)<<"X2";
  stream<<setw(4)<<"Y1";
  stream<<setw(4)<<"Y2";
  stream<<setw(5)<<"Z1";
  stream<<setw(5)<<"Z2";
  stream<<setw(6)<<"Npix";
  stream<<setw(10)<<"F_tot";
  stream<<setw(8)<<"F_peak";
  stream<<endl;
  stream<<setfill('-')<<setw(4+6+6+7+4+4+4+4+5+5+6+10+8)<<'-';
  stream<<endl;
}

void Detection::outputDetectionText(int idNumber)
{
  /**
   * outputDetectionText
   *  Print to std::cout the relevant details of a detected object.
   *  This does not include any WCS parameters, only pixel positions & extent, and flux info.
   *  Also prints a counter, provided as an input.
   */

  std::cout<<setw(5)<<setfill('0')<<idNumber;
  std::cout.setf(std::ios::fixed);  
  std::cout<<setfill(' ')<<setprecision(1);
  std::cout<<setw(6) << this->xcentre + this->xSubOffset; 
  std::cout<<setw(6) << this->ycentre + this->ySubOffset; 
  std::cout<<setw(7) << this->zcentre + this->zSubOffset; 
  std::cout<<setw(4) << this->xmin + this->xSubOffset;    
  std::cout<<setw(4) << this->xmax + this->xSubOffset;    
  std::cout<<setw(4) << this->ymin + this->ySubOffset;    
  std::cout<<setw(4) << this->ymax + this->ySubOffset;    
  std::cout<<setw(5) << this->zmin + this->zSubOffset;    
  std::cout<<setw(5) << this->zmax + this->zSubOffset;    
  std::cout<<setprecision(4);
  std::cout<<setw(6) << this->pix.size();	
  std::cout<<setw(10)<< this->totalFlux;	
  std::cout<<setw(8) << this->peakFlux;  
  std::cout<<endl;
  resetiosflags(std::ios::fixed);

}

void outputDetectionTextHeader()
{
  /**
   * outputDetectionTextHeader
   *  Prints to std::cout the column headers to match the output generated by outputDetectionText
   */

  std::cout<<setfill(' ');
  std::cout<<setw(5)<<"Obj#";
  std::cout<<setw(6)<<"Xcent";
  std::cout<<setw(6)<<"Ycent";
  std::cout<<setw(7)<<"Zcent";
  std::cout<<setw(4)<<"X1";
  std::cout<<setw(4)<<"X2";
  std::cout<<setw(4)<<"Y1";
  std::cout<<setw(4)<<"Y2";
  std::cout<<setw(5)<<"Z1";
  std::cout<<setw(5)<<"Z2";
  std::cout<<setw(6)<<"Npix";
  std::cout<<setw(8)<<"F_tot";
  std::cout<<setw(8)<<"F_peak";
  std::cout<<endl;
  for(int i=0;i<4+6+6+7+4+4+4+4+5+5+6+8+8;i++) std::cout<<'-';
  std::cout<<endl;

}

string Detection::outputLabelWCS()
{

  std::stringstream ss;
  ss << "#" << setfill('0') << setw(3) << this->id << ": ";
  ss << setfill(' ');
  ss << this->raS << ", ";
  ss << this->decS;
  ss << setprecision(3);
  ss.setf(std::ios::fixed);
  ss << ", Vel=" << this->vel <<"km/s";

  return ss.str();


}


string Detection::outputLabelPix()
{
  /**
   * outputLabelPix
   *  Prints to a string the pixel centres and extents of a detected object.
   *  Returns the string.
   */

  std::stringstream ss;
  ss.setf(std::ios::fixed);
  ss << setprecision(1) << setfill(' ');
  ss       <<setw(5)<< this->xcentre + this->xSubOffset;
  ss <<" " <<setw(5)<< this->ycentre + this->ySubOffset;
  ss <<" " <<setw(5)<< this->zcentre + this->zSubOffset;
  ss <<" ["<<setw(3)<< this->xmin + this->xSubOffset   <<":"<< this->xmax + this->xSubOffset;
  ss <<", "<<setw(3)<< this->ymin + this->ySubOffset   <<":"<< this->ymax + this->ySubOffset;
  ss <<", "<<setw(3)<< this->zmin + this->zSubOffset   <<":"<< this->zmax + this->zSubOffset << "]";
  
  return ss.str();
}



string Detection::outputLabelInfo()
{
  /**
   * outputLabelInfo
   *  Prints to a string the widths of the object (in position and velocity), 
   *  as well as the flux information.
   *  Assumes the WCS parameters of the object have been calculated.
   *  If they have not (given by the isWCS() function), then the WCS-related outputs 
   *  are left blank.
   *  Returns the string.
   */

  std::stringstream ss;
  ss << setprecision(3);
  ss.setf(std::ios::fixed);
  if(this->flagWCS){
    ss << "w_"          << this->lngtype  <<"="    << this->raWidth;
    ss << ", w_"        << this->lattype  <<"="    << this->decWidth;
    ss << ", w_Vel="    << this->velWidth <<"km/s";
    ss << ", F\\dT\\u=" << this->intFlux;
  }
  else 
    ss << "F\\dT\\u="   << this->intFlux;
  //ss << ", F\\dT\\u=" << this->totalFlux;
  ss   << ", F\\dP\\u=" << this->peakFlux;
  string output = ss.str();

  return output;
}

